// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Check check
//
// swagger:model Check
type Check struct {

	// check name
	// Required: true
	CheckName *string `json:"CheckName"`

	// last check result
	// Required: true
	LastCheckResult *CheckResult `json:"LastCheckResult"`

	// schedule
	// Required: true
	Schedule *string `json:"Schedule"`

	// target name
	// Required: true
	TargetName *string `json:"TargetName"`
}

// Validate validates this check
func (m *Check) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCheckName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastCheckResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Check) validateCheckName(formats strfmt.Registry) error {

	if err := validate.Required("CheckName", "body", m.CheckName); err != nil {
		return err
	}

	return nil
}

func (m *Check) validateLastCheckResult(formats strfmt.Registry) error {

	if err := validate.Required("LastCheckResult", "body", m.LastCheckResult); err != nil {
		return err
	}

	if m.LastCheckResult != nil {
		if err := m.LastCheckResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LastCheckResult")
			}
			return err
		}
	}

	return nil
}

func (m *Check) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("Schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

func (m *Check) validateTargetName(formats strfmt.Registry) error {

	if err := validate.Required("TargetName", "body", m.TargetName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this check based on the context it is used
func (m *Check) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLastCheckResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Check) contextValidateLastCheckResult(ctx context.Context, formats strfmt.Registry) error {

	if m.LastCheckResult != nil {
		if err := m.LastCheckResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LastCheckResult")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Check) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Check) UnmarshalBinary(b []byte) error {
	var res Check
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
