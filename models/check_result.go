// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckResult check result
//
// swagger:model CheckResult
type CheckResult struct {

	// error
	// Required: true
	Error *string `json:"Error"`

	// last check
	// Required: true
	LastCheck *string `json:"LastCheck"`

	// message
	// Required: true
	Message *string `json:"Message"`

	// success
	// Required: true
	Success *bool `json:"Success"`
}

// Validate validates this check result
func (m *CheckResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckResult) validateError(formats strfmt.Registry) error {

	if err := validate.Required("Error", "body", m.Error); err != nil {
		return err
	}

	return nil
}

func (m *CheckResult) validateLastCheck(formats strfmt.Registry) error {

	if err := validate.Required("LastCheck", "body", m.LastCheck); err != nil {
		return err
	}

	return nil
}

func (m *CheckResult) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("Message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *CheckResult) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("Success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this check result based on context it is used
func (m *CheckResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CheckResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckResult) UnmarshalBinary(b []byte) error {
	var res CheckResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
