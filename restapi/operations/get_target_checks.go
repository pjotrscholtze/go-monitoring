// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTargetChecksHandlerFunc turns a function with the right signature into a get target checks handler
type GetTargetChecksHandlerFunc func(GetTargetChecksParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTargetChecksHandlerFunc) Handle(params GetTargetChecksParams) middleware.Responder {
	return fn(params)
}

// GetTargetChecksHandler interface for that can handle valid get target checks params
type GetTargetChecksHandler interface {
	Handle(GetTargetChecksParams) middleware.Responder
}

// NewGetTargetChecks creates a new http.Handler for the get target checks operation
func NewGetTargetChecks(ctx *middleware.Context, handler GetTargetChecksHandler) *GetTargetChecks {
	return &GetTargetChecks{Context: ctx, Handler: handler}
}

/* GetTargetChecks swagger:route GET /check/{targetName}/{checkName} getTargetChecks

Get historical data of a check

*/
type GetTargetChecks struct {
	Context *middleware.Context
	Handler GetTargetChecksHandler
}

func (o *GetTargetChecks) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetTargetChecksParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
